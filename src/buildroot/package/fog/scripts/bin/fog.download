#!/bin/bash
. /usr/share/fog/lib/funcs.sh
. /bin/fog.donate
. /bin/fog.checkin
. /bin/fog.mount
. /bin/fog.checkmount
. /bin/fog.checkimgvar
imagePath="/images/$img"
origmac=$mac
mac=$(getMACAddresses | base64)
. /bin/fog.inventory "true"
mac="$origmac"
origmac=""
layPartSize="-1s"
fog.statusreporter "$mac" "$web" & disown
statusReporter="$!"
fixed_size_partitions=""
echo " * Using Image: $img"
case $imgType in
    [Nn]|mps|dd)
        dots "Looking for Hard Disk"
        getHardDisk
        if [[ -z $hd ]]; then
            echo "Failed"
            debugPause
            handleError "Could not find hard disk ($0)"
        fi
        echo "Done"
        debugPause
        diskSize=$(lsblk --bytes -dplno SIZE -I 3,8,9,179,259 $hd)
        [[ $diskSize -gt 2199023255552 ]] && layPartSize="2tB"
        echo " * Using Disk: $hd"
        validResizeOS
        enableWriteCache "$hd"
        ;;
    mpa)
        dots "Looking for Hard Disks"
        getHardDisk "true"
        if [[ -z $disks ]]; then
            echo "Failed"
            debugPause
            handleError "Count not find any disks ($0)"
        fi
        echo "Done"
        debugPause
        echo " * Using Disks: $disks"
        ;;
esac
echo " * Preparing Partition layout"
case $imgType in
    [Nn])
        echo " * Wiping $hd partition information"
        initHardDisk "$hd"
        runPartprobe "$hd"
        case $osid in
            50)
                [[ ! -d $imagePath ]] && handleError "Unable to locate image store ($0)"
                prepareResizeDownloadPartitions
                ;;
            [1-2])
                [[ ! -f $imagePath && ! -f $imagePath/$img && ! -f $imagePath/d1p1.img ]] && handleError "Unable to locate image store ($0)"
                [[ -d $imagePath && -f $imagePath/$img ]] && imagePath="$imagePath/$img"
                [[ -d $imagePath && -f $imagePath/d1p1.img ]] && imagePath="$imagePath/d1p1.img"
                dots "Removing partition"
                parted -s $hd rm 1 >/dev/null 2>&1
                if [[ ! $? -eq 0 ]]; then
                    echo "Failed"
                    debugPause
                    handleError "Fatal Error: Could not remove old partition ($0)"
                fi
                echo "Done"
                debugPause
                dots "Attempting to expand/fill partitions"
                parted -s $hd mkpart primary ntfs 63s -- $layPartSize >/dev/null 2>&1
                if [[ ! $? -eq 0 ]]; then
                    echo "Failed"
                    debugPause
                    handleError "Could not create partition to fill disk"
                fi
                echo "Done"
                debugPause
                dots "Setting boot partition"
                parted -s "$hd" set 1 boot on >/dev/null 2>&1
                if [[ ! $? -eq 0 ]]; then
                    echo "Failed"
                    debugPause
                    handleError "Fatal Error: Could not make partition bootable ($0)"
                fi
                runPartprobe "$hd"
                echo "Done"
                debugPause
                getPartitions "$hd"
                for part in $parts; do
                    [[ -e $part ]] && break
                done
                ;;
            [5-7]|9)
                [[ ! -d $imagePath && ! -f $imagePath/sys.img.000 ]] && handleError "Unable to locate image store ($0)"
                [[ ! -f $imagePath/sys.img.000 ]] && prepareResizeDownloadPartitions
                if [[ -f $imagePath/sys.img.000 && ! $nombr -eq 1 ]]; then
                    echo " * Using legacy style partition setup"
                    win7partcnt=1
                    dots "Windows Boot Partition Exists"
                    if [[ ! -f $imagePath/gpt.bak && ! -f $imagePath/rec1.img.000 && ! -f $imagePath/rec.img.000 ]]; then
                        echo "No"
                    else
                        echo "Yes"
                        [[ -f $imagePath/rec.img.000 ]] && win7partcnt=2
                        [[ -f $imagePath/rec.img.001 || -f $imagePath/gpt.bak ]] && win7partcnt=3
                    fi
                    debugPause
                    dots "Removing partition"
                    parted -s $hd rm 1 >/dev/null 2>&1
                    if [[ ! $? -eq 0 ]]; then
                        echo "Failed"
                        debugPause
                        handleError "Fatal Error: Could not remove old partition ($0)"
                    fi
                    echo "Done"
                    debugPause
                    dots "Attempting to expand/fill partitions"
                    do_fill=$(fillDiskWithPartitionsIsOK $hd $imagePath 1)
                    case $do_fill in
                        1)
                            fillDiskWithPartitions "$hd" "$imagePath" 1
                            echo "Done"
                            ;;
                        *)
                            startsector="2048s"
                            [[ $imgFormat -eq 1 || $imgLegacy -eq 1 ]] && startsector="63s"
                            case $win7partcnt in
                                1)
                                    parted -s $hd mkpart primary ntfs $startsector -- $layPartSize >/dev/null 2>&1
                                    if [[ ! $? -eq 0 ]]; then
                                        echo "Failed"
                                        debugPause
                                        handleError "Fatal Error: Could not recreate first partition ($0)"
                                    fi
                                    echo "Done"
                                    dots "Setting boot partition"
                                    parted -s $hd set 1 boot on >/dev/null 2>&1
                                    if [[ ! $? -eq 0 ]]; then
                                        echo "Failed"
                                        debugPause
                                        handleError "Fatal Error: Could not make partition bootable ($0)"
                                    fi
                                    echo "Done"
                                    ;;
                                2)
                                    parted -s $hd mkpart primary ntfs $startsector 206847s >/dev/null 2>&1
                                    parted -s $hd mkpart primary ntfs $defaultpart2start -- $layPartSize >/dev/null 2>&1
                                    if [[ ! $? -eq 0 ]]; then
                                        echo "Failed"
                                        debugPause
                                        handleError "Fatal Error: Could not recreate main partition ($0)"
                                    fi
                                    echo "Done"
                                    debugPause
                                    dots "Setting boot partition"
                                    parted -s $hd set 1 boot on >/dev/null 2>&1
                                    if [[ ! $? -eq 0 ]]; then
                                        echo "Failed"
                                        debugPause
                                        handleError "Fatal Error: Could not make partition bootable ($0)"
                                    fi
                                    echo "Done"
                                    ;;
                                3)
                                    sgdisk --zap-all $hd >/dev/null 2>&1
                                    sgdisk --mbrtogpt --load-backup=$imagePath/gpt.bak --move-second-header $hd >/dev/null 2>&1
                                    if [[ ! $? -eq 0 ]]; then
                                        echo "Failed"
                                        debugPause
                                        handleError "Fatal Error: Could not recreate partitions ($0)"
                                    fi
                                    sgdisk -x 3:$(sgdisk -E $hd) $hd >/dev/null 2>&1
                                    if [[ ! $? -eq 0 ]]; then
                                        echo "Failed"
                                        debugPause
                                        handleError "Fatal Error: Could not resize partitions ($0)"
                                    fi
                                    echo "Done"
                                    ;;
                            esac
                            ;;
                    esac
                    debugPause
                    runPartprobe "$hd"
                    dots "Setting up partition variables"
                    getPartitions "$hd"
                    for part in $parts; do
                        curpartnum=$(getPartitionNumber $part)
                        case $osid in
                            [1-2])
                                [[ -e $part ]] && break
                                ;;
                            [5-7]|9)
                                case $win7partcnt in
                                    1)
                                        [[ $curpartnum -eq 1 ]] && win7sys="$part"
                                        ;;
                                    2)
                                        [[ $curpartnum -eq 1 ]] && win7rec="$part"
                                        [[ $curpartnum -eq 2 ]] && win7sys="$part"
                                        ;;
                                    3)
                                        [[ $curpartnum -eq 1 ]] && win7rec1="$part"
                                        [[ $curpartnum -eq 2 ]] && win7rec2="$part"
                                        [[ $curpartnum -eq 3 ]] && win7sys="$part"
                                        ;;
                                esac
                                ;;
                        esac
                    done
                    echo "Done"
                    debugPause
                fi
                ;;
        esac
        ;;
    mps)
        [[ ! -d $imagePath ]] && handleError "Unable to locate image store ($0)"
        echo " * Wiping $hd partition information"
        initHardDisk "$hd"
        [[ $nombr -eq 1 ]] || restorePartitionTablesAndBootLoaders "$hd" 1 "$imagePath"
        runPartprobe "$hd"
        gptcheck="$global_gptcheck"
        ;;
    mpa)
        [[ ! -d $imagePath ]] && handleError "Unable to locate image store ($0)"
        getHardDisk "true"
        intDisk=1
        for disk in $disks; do
            echo " * Wiping $disk partition information"
            initHardDisk "$disk"
            [[ $nombr -eq 1 ]] || restorePartitionTablesAndBootLoaders "$disk" "$intDisk" "$imagePath"
            runPartprobe "$disk"
            gptcheck="$global_gptcheck"
            let intDisk+=1
        done
        ;;
esac
echo "   +--------------------------------+"
echo "   |  Attempting to download image  |"
echo "   +--------------------------------+"
[[ $imgFormat -eq 1 || $imgLegacy -eq 1 ]] && echo "   |         Using Partimage        |" || echo "   |         Using Partclone        |"
echo "   +--------------------------------+"
[[ $mc == yes ]] && usleep 10000000 || usleep 3000000
case $imgType in
    [Nn])
        case $osid in
            [1-2])
                [[ ! -f $imagePath ]] && handleError "Fatal Error: Could not locate file ($0)"
                [[ -f $imagePath ]] && restorePartition "$part" || performResizeRestore "$hd" "$imagePath" 1 "$imgPartitionType"
                ;;
            [5-7]|9)
                [[ ! -d $imagePath && ! -f $imagePath/sys.img.000 ]] && handleError "Fatal Error: Could not locate file ($0)"
                performResizeRestore "$hd" "$imagePath" 1 "$imgPartitionType"
                ;;
            50)
                performResizeRestore "$hd" "$imagePath" 1 "$imgPartitionType"
                ;;
        esac
        ;;
    mps)
        recparts=$(getValidRestorePartitions $hd 1 $imagePath)
        for recpart in $recparts; do
            [[ $imgPartitionType == all || $imgPartitionType == $(getPartitionNumber $recpart) ]] && restorePartition "$recpart" 1 "$imagePath" "$imgPartitionType" || echo " * Skipping partition $recpart"
        done
        makeAllSwapSystems "$hd" 1 "$imagePath" "$imgPartitionType"
        ;;
    mpa)
        for disk in $disks; do
            recparts=$(getValidRestorePartitions $disk 1 $imagePath)
            for recpart in $recparts; do
                [[ $imgPartitionType == all || $imgPartitionType == $(getPartitionNumber $recpart) ]] && restorePartition "$recpart" "$intDisk" "$imagePath" "$imgPartitionType" || echo " * Skipping partition $recpart"
            done
            makeAllSwapSystems "$disk" 1 "$imagePath" "$imgPartitionType"
            let intDisk+=1
        done
        ;;
    dd)
        restorePartition "$hd"
        ;;
esac
killStatusReporter
if [[ -f /images/postdownloadscripts/fog.postdownload ]]; then
    postdownpath="/images/postdownloadscripts/"
    . ${postdownpath}fog.postdownload
fi
if [[ ! $capone -eq 1 ]]; then
    if [[ $osid == +([1-2]|[5-7]|9) ]]; then
        case $imgType in
            mpa)
                for disk in $disks; do
                    getPartitions "$disk"
                    for part in $parts; do
                        [[ $(fsTypeSetting $part) == ntfs ]] && changeHostname
                    done
                done
                ;;
            *)
                getPartitions "$hd"
                for part in $parts; do
                    [[ $(fsTypeSetting $part) == ntfs ]] && changeHostname
                done
                ;;
        esac
    fi
    . /bin/fog.imgcomplete
fi
[[ ! $mode == debug && -z $isdebug ]] && echo " * Rebooting system as task is complete"
