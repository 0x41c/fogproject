#!/bin/bash
. /usr/share/fog/lib/funcs.sh
. /bin/fog.checkin
. /bin/fog.mount
. /bin/fog.checkmount
. /bin/fog.checkimgvar
imagePath="/images/$macWinSafe"
parts=""
part=""
disks=""
disk=""
hd=""
echo " * Preparing to send image file to server"
percent="$pct"
[[ $pct -lt 5 || $pct -ge 100 ]] && percent=5
[[ $pct -lt 10 ]] && percent="0$pct"
fog.statusreporter "$mac" "$web" & disown
statusReporter="$!"
prepareUploadLocation "$imagePath"
echo " * Using Image: $img"
case $imgType in
    [Nn]|mps|dd)
        dots "Looking for Hard Disk"
        getHardDisk
        if [[ -z $hd ]]; then
            echo "Failed"
            debugPause
            handleError "Could not find hard disk ($0)"
        fi
        echo "Done"
        debugPause
        dots "Reading Partition Tables"
        runPartprobe "$hd"
        getPartitions "$hd"
        if [[ -z $parts ]]; then
            echo "Failed"
            debugPause
            handleError "Could not find partitions ($0)"
        fi
        echo "Done"
        debugPause
        echo " * Using Hard Disk: $hd"
        ;;
    mpa)
        dots "Looking for Hard Disks"
        getHardDisk "true"
        if [[ -z $disks ]]; then
            echo "Failed"
            debugPause
            handleError "Could not find any disks ($0)"
        fi
        echo "Done"
        debugPause
        for disk in $disks; do
            dots "Reading Partition Tables on $disk"
            getPartitions "$disk"
            if [[ -z $parts ]]; then
                echo "Failed"
                debugPause
                echo " * No partitions for disk $disk"
                debugPause
                continue
            fi
            echo "Done"
        done
        ;;
esac
debugPause
echo " * Now FOG will attempt to upload the image using Partclone"
debugPause
# resizable image type
#  discover windows partitions
#  remove pagefile and hibernate file
#  validate XP partition location
#  save original partition table
#  save MBR
#  shrink filesystems and partitions
#  save GRUB
#  save shrunken partition table
#  clone filesystems
#  restore original MBR and partition table
#  expand filesystems
case $imgType in
    [Nn])
        validResizeOS
        win7partcnt=$(echo $parts | wc -w)
        dots "Checking for fixed partitions"
        runPartprobe "$hd"
        getPartitions "$hd"
        part_number=""
        for part in $parts; do
            fsTypeSetting "$part"
            getPartitionNumber "$part"
            case $fstype in
                ntfs|extfs)
                    continue
                    ;;
                *)
                    fixed_size_partitions="$fixed_size_partitions:$part_number:"
                    ;;
            esac
        done
        echo "Done"
        debugPause
        dots "Getting Windows/Linux Partition Count"
        countPartTypes "$hd" "ntfs" "ntfscnt"
        countPartTypes "$hd" "extfs" "extfscnt"
        if [[ $ntfscnt -eq 0 && $extfscnt -eq 0 ]]; then
            echo "Failed"
            debugPause
            handleError "No resizable partitions found ($0)"
        fi
        echo "Done"
        debugPause
        echo " * NTFS Partition count of: $ntfscnt"
        debugPause
        echo " * EXTFS Partition count of: $extfscnt"
        debugPause
        case $osid in
            [5-7]|9|50)
                echo " * Setting up any additional fixed parts"
                part_number=0
                for part in $parts; do
                    getPartitionNumber "$part"
                    case $win7partcnt in
                        2)
                            [[ $part_number -eq 1 ]] && fixed_size_partitions="$fixed_size_partitions:$part:"
                            ;;
                        3)
                            [[ $part_number == +(1|2) ]] && fixed_size_partitions="$fixed_size_partitions:$part:"
                            ;;
                        *)
                            continue
                            ;;
                    esac
                done
                ;;
        esac
        # All:
        #  save the list of fixed size partitions
        fixed_size_partitions=$(echo $fixed_size_partitions | sed -r 's/[^:0-9]//g' | sed -r 's/^://')
        echo "$fixed_size_partitions" > "$imagePath/d1.fixed_size_partitions"
        case $osid in
            [1-2])
                dots "Getting sector start"
                partitionStart=$(fdisk -lu | awk "/$(escapeItem $part)/{print \$3}")
                [[ -z $partitionStart ]] && partitionStart=63
                echo "Done"
                debugPause
                ;;
        esac
        # Windows 2000/XP, Vista, 7, 8, 8.1, Linux:
        #  Save unmodified partition table for download use
        #  Start filesytem type record
        dots "Saving original partition table"
        saveOriginalPartitions "$hd" "$imagePath" 1
        swapuuidfilename=""
        swapUUIDFileName "$imagePath" 1
        echo -n "" > "$imagePath/d1.original.fstypes"
        echo -n "" > $swapuuidfilename
        echo "Done"
        debugPause
        echo " * Shrinking Partitions on disk"
        debugPause
        for part in $parts; do
            clearMountedDevices "$part"
            removePageFile "$part"
            shrinkPartition "$part" "$imagePath/d1.original.fstypes" "$fixed_size_partitions"
        done
        echo " * Saving shrunken partition table"
        debugPause
        sfdiskminimumpartitionfilename=""
        sfdiskMinimumPartitionFileName "$imagePath" 1
        savePartitionTablesAndBootLoaders "$hd" 1 "$imagePath" "$osid" "$imgPartitionType" "$sfdiskminimumpartitionfilename"
        echo " * Processing Hard Disk: $hd"
        for part in $parts; do
            savePartition "$part" 1 "$imagePath" "$imgPartitionType"
        done
        dots "Restoring Original Partition Layout"
        restoreOriginalPartitions "$hd" "$imagePath" 1
        runPartprobe "$hd"
        echo "Done"
        debugPause
        [[ $osid -eq 2 ]] && correctVistaMBR "$hd"
        getPartitions "$hd"
        for part in $parts; do
            expandPartition "$part" "$fixed_size_partitions"
        done
        ;;
    mps)
        echo " * Processing Hard Disk: $hd"
        savePartitionTablesAndBootLoaders "$hd" 1 "$imagePath" "$osid" "$imgPartitionType"
        getPartitions "$hd"
        for part in $parts; do
            savePartition "$part" 1 "$imagePath" "$imgPartitionType"
        done
        ;;
    mpa)
        disk_number=1
        for disk in $disks; do
            debugPause
            echo " * Processing Hard Disk: $disk"
            savePartitionTablesAndBootLoaders "$disk" "$disk_number" "$imagePath" "$osid" "$imgPartitionType"
            runPartprobe "$disk"
            getPartitions "$disk"
            for part in $parts; do
                savePartition "$part" "$disk_number" "$imagePath" "$imgPartitionType"
            done
            echo " * Disk $disk complete"
            let disk_number+=1
        done
        ;;
    dd)
        imgpart="$imagePath/$img"
        mkfifo /tmp/pigz1 >/dev/null 2>&1
        uploadFormat "/tmp/pigz1" "$imgpart"
        partclone.imager -c -s "$hd" -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog
        rm /tmp/pigz1 >/dev/null 2>&1
        clearScreen
        ;;
esac
chmod -R 777 "$imagePath" >/dev/null 2>&1
killStatusReporter
. /bin/fog.imgcomplete
[[ ! $mode == debug && -z $isdebug ]] && echo " * Rebooting system as task is complete"
