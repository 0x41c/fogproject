#!/bin/bash
. /usr/share/fog/lib/funcs.sh
. /bin/fog.checkin
. /bin/fog.mount
. /bin/fog.checkmount
. /bin/fog.checkimgvar
imagePath="/images/$macWinSafe"
echo
echo " * Preparing to send image file to server"
echo
percent="$pct"
[[ $pct -lt 5 || $pct -ge 100 ]] && percent=5
[[ $pct -lt 10 ]] && percent="0$pct"
fog.statusreporter "$mac" "$web" & disown
statusReporter="$!"
prepareUploadLocation
echo
echo " * Using Image: $img"
echo
case $imgType in
    [Nn]|mps|dd)
        dots "Looking for Hard Disk"
        getHardDisk
        if [[ -z $hd ]]; then
            echo "Failed"
            debugPause
            handleError "Could not find hard disk ($0)"
        fi
        echo "Done"
        debugPause
        dots "Reading Partition Tables"
        runPartprobe "$hd"
        getPartitions "$hd"
        if [[ -z $parts ]]; then
            echo "Failed"
            debugPause
            handleError "Could not find partitions ($0)"
        fi
        echo "Done"
        debugPause
        echo
        echo " * Using Hard Disk: $hd"
        echo
        debugPause
        echo
        echo " * Partitions found: $parts"
        echo
        debugPause
        ;;
    mpa)
        dots "Looking for Hard Disks"
        getHardDisk "true"
        if [[ -z $disks ]]; then
            echo "Failed"
            debugPause
            handleError "Could not find any disks ($0)"
        fi
        echo "Done"
        debugPause
        echo
        echo " * Using Disks: $disks"
        echo
        debugPause
        for disk in $disks; do
            dots "Reading Partition Tables on $disk"
            getPartitions "$disk"
            if [[ -z $parts ]]; then
                echo "Failed"
                debugPause
                echo
                echo " * No partitions for disk $disk"
                echo
                debugPause
                continue
            fi
            echo "Done"
            debugPause
            echo
            echo " * Partitions on disk $disk: $parts"
            echo
            debugPause
        done
        ;;
esac
echo
echo " * Now FOG will attempt to upload the image using Partclone"
echo
debugPause
# resizable image type
#  discover windows partitions
#  remove pagefile and hibernate file
#  validate XP partition location
#  save original partition table
#  save MBR
#  shrink filesystems and partitions
#  save GRUB
#  save shrunken partition table
#  clone filesystems
#  restore original MBR and partition table
#  expand filesystems
case $imgType in
    [Nn])
        validResizeOS
        win7partcnt=$(echo $parts | wc -l)
        dots "Checking for fixed partitions"
        for part in $parts; do
            fstype=$(fsTypeSetting $part)
            case $fstype in
                ntfs|extfs)
                    fixed_size_partitions="$fixed_size_partitions:$part:"
                    ;;
            esac
        done
        echo "Done"
        debugPause
        dots "Getting Windows/Linux Partition Count"
        ntfscnt=$(countNtfs $hd)
        extfsavail=$(countExtfs $hd)
        if [[ $ntfscnt -eq 0 && $extfsavail -eq 0 ]] || [[ -z $ntfscnt && -z $extfsavail ]]; then
            echo "Failed"
            debugPause
            handleError "No resizable partitions found ($0)"
        fi
        echo "Done"
        debugPause
        [[ -z $ntfscnt ]] && ntfscnt=0
        [[ -z $extfsavail ]] && extfsavail=0
        echo
        echo " * NTFS Partition count of: $ntfscnt"
        echo
        debugPause
        echo
        echo " * EXTFS Partition count of: $extfsavail"
        echo
        debugPause
        for partclr in $parts; do
            clearMountedDevices "$partclr"
        done
        fixedcount=0
        case $osid in
            [5-7]|9|50)
                echo " * Setting up any additional fixed parts"
                for part in $parts; do
                    if [[ $fixedcount -eq 0 && $win7partcnt -eq 2 ]]; then
                        fixed_size_partitions="$fixed_size_partitions:$part:"
                    elif [[ $fixedcount == +([1-3]) ]] && [[ $win7partcnt -eq 3 ]]; then
                        fixed_size_partitions="$fixed_size_partitions:$part:"
                        [[ $fixedcount -eq 3 ]] && break
                    fi
                done
                let fixedcount+=1
                ;;
        esac
        fixed_size_partitions="${fixed_size_partitions#"${fixed_size_partitions%%[![:]]*}"}"
        fixed_size_partitions="${fixed_size_partitions%"${fixed_size_partitions##*[![:]]}"}"
        # All:
        #  save the list of fixed size partitions
        fixed_size_partitions=$(echo $fixed_size_partitions | sed -r 's/[^:0-9]//g' | sed -r 's/^://')
        echo "$fixed_size_partitions" > "$imagePath/d1.fixed_size_partitions"
        if [[ $osid == +([1-2]|[5-7]|9|50) ]]; then
            for partpage in $parts; do
                removePageFile "$partpage"
            done
        fi
        dots "Getting sector start"
        case $osid in
            [1-2])
                partitionStart=$(fdisk -lu | grep $part | awk '{print $3}')
                [[ -z $partitionStart ]] && partitionStart=63
                ;;
        esac
        echo "Done"
        debugPause
        # Windows 2000/XP, Vista, 7, 8, 8.1, Linux:
        #  Save unmodified partition table for download use
        #  Start filesytem type record
        dots "Saving original partition table"
        saveOriginalPartitions "$hd" "$imagePath" 1
        echo -n "" > "$imagePath/d1.original.fstypes"
        echo -n "" > $(swapUUIDFileName $imagePath 1)
        echo "Done"
        debugPause
        savePartitionTablesAndBootLoaders "$hd" 1 "$imagePath" "$osid" "$imgPartitionType"
        for part in $parts; do
            shrinkPartition "$part" "$imagePath/d1.original.fstypes"
        done
        runPartprobe "$hd"
        debugPause
        [[ ! $osid -eq 50 ]] && resetFlag "$part"
        echo " * Processing Hard Disk: $disk"
        for part in $parts; do
            savePartition "$part" 1 "$imagePath" "$imgPartitionType"
            debugPause
        done
        dots "Restoring MBR"
        restoreOriginalPartitions "$hd" "$imagePath" 1
        echo "Done"
        debugPause
        [[ $osid -eq 2 ]] && correctVistaMBR "$hd"
        for part in $parts; do
            expandPartition "$part"
        done
        ;;
    mps)
        echo " * Processing Hard Disk: $hd"
        savePartitionTablesAndBootLoaders "$hd" 1 "$imagePath" "$osid" "$imgPartitionType"
        for part in $parts; do
            savePartition "$part" 1 "$imagePath" "$imgPartitionType"
            debugPause
        done
        ;;
    mpa)
        intDisk=1
        for disk in $disks; do
            savePartitionTablesAndBootLoaders "$disk" "$intDisk" "$imagePath" "$osid" "$imgPartitionType"
            echo " * Processing Hard Disk: $disk"
            for part in $parts; do
                savePartition "$part" "$intDisk" "$imagePath" "$imgPartitionType"
                debugPause
            done
            echo " * Disk $disk complete"
            let intDisk+=1
            debugPause
        done
        ;;
    dd)
        imgpart="$imagePath/$img"
        mkfifo /tmp/pigz1 >/dev/null 2>&1
        uploadFormat "/tmp/pigz1" "$imgpart"
        partclone.imager -c -s "$hd" -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog
        rm /tmp/pigz1 >/dev/null 2>&1
        clear
        ;;
esac
chmod -R 777 "$imagePath" >/dev/null 2>&1
killStatusReporter
. /bin/fog.imgcomplete
[[ ! $mode == debug && -z $isdebug ]] && echo " * Rebooting system as task is complete"
